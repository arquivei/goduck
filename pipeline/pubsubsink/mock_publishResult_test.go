// Code generated by mockery v2.14.0. DO NOT EDIT.

package pubsubsink

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockPublishResult is an autogenerated mock type for the publishResult type
type mockPublishResult struct {
	mock.Mock
}

type mockPublishResult_Expecter struct {
	mock *mock.Mock
}

func (_m *mockPublishResult) EXPECT() *mockPublishResult_Expecter {
	return &mockPublishResult_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx
func (_m *mockPublishResult) Get(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockPublishResult_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockPublishResult_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
func (_e *mockPublishResult_Expecter) Get(ctx interface{}) *mockPublishResult_Get_Call {
	return &mockPublishResult_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *mockPublishResult_Get_Call) Run(run func(ctx context.Context)) *mockPublishResult_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockPublishResult_Get_Call) Return(_a0 string, _a1 error) *mockPublishResult_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTnewMockPublishResult interface {
	mock.TestingT
	Cleanup(func())
}

// newMockPublishResult creates a new instance of mockPublishResult. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockPublishResult(t mockConstructorTestingTnewMockPublishResult) *mockPublishResult {
	mock := &mockPublishResult{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
