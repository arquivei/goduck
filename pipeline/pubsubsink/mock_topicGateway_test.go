// Code generated by mockery v2.14.0. DO NOT EDIT.

package pubsubsink

import (
	context "context"

	pubsub "cloud.google.com/go/pubsub"
	mock "github.com/stretchr/testify/mock"
)

// mockTopicGateway is an autogenerated mock type for the topicGateway type
type mockTopicGateway struct {
	mock.Mock
}

type mockTopicGateway_Expecter struct {
	mock *mock.Mock
}

func (_m *mockTopicGateway) EXPECT() *mockTopicGateway_Expecter {
	return &mockTopicGateway_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function with given fields: ctx
func (_m *mockTopicGateway) Exists(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockTopicGateway_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type mockTopicGateway_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//  - ctx context.Context
func (_e *mockTopicGateway_Expecter) Exists(ctx interface{}) *mockTopicGateway_Exists_Call {
	return &mockTopicGateway_Exists_Call{Call: _e.mock.On("Exists", ctx)}
}

func (_c *mockTopicGateway_Exists_Call) Run(run func(ctx context.Context)) *mockTopicGateway_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockTopicGateway_Exists_Call) Return(_a0 bool, _a1 error) *mockTopicGateway_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Publish provides a mock function with given fields: ctx, msg
func (_m *mockTopicGateway) Publish(ctx context.Context, msg *pubsub.Message) publishResult {
	ret := _m.Called(ctx, msg)

	var r0 publishResult
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.Message) publishResult); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(publishResult)
		}
	}

	return r0
}

// mockTopicGateway_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type mockTopicGateway_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//  - ctx context.Context
//  - msg *pubsub.Message
func (_e *mockTopicGateway_Expecter) Publish(ctx interface{}, msg interface{}) *mockTopicGateway_Publish_Call {
	return &mockTopicGateway_Publish_Call{Call: _e.mock.On("Publish", ctx, msg)}
}

func (_c *mockTopicGateway_Publish_Call) Run(run func(ctx context.Context, msg *pubsub.Message)) *mockTopicGateway_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsub.Message))
	})
	return _c
}

func (_c *mockTopicGateway_Publish_Call) Return(_a0 publishResult) *mockTopicGateway_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *mockTopicGateway) Stop() {
	_m.Called()
}

// mockTopicGateway_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type mockTopicGateway_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *mockTopicGateway_Expecter) Stop() *mockTopicGateway_Stop_Call {
	return &mockTopicGateway_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *mockTopicGateway_Stop_Call) Run(run func()) *mockTopicGateway_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockTopicGateway_Stop_Call) Return() *mockTopicGateway_Stop_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTnewMockTopicGateway interface {
	mock.TestingT
	Cleanup(func())
}

// newMockTopicGateway creates a new instance of mockTopicGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockTopicGateway(t mockConstructorTestingTnewMockTopicGateway) *mockTopicGateway {
	mock := &mockTopicGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
